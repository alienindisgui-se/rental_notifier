name: Hourly Rental Scraping

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  scrape:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read # Required to list workflow runs and download artifacts

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Find latest successful workflow run
      id: find-run
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          // Use context.workflow to get the workflow name dynamically
          const workflowName = context.workflow;

          console.log(`Searching for latest successful run of workflow '${workflowName}' in ${owner}/${repo}`);

          try {
            // List recent runs for this workflow across all branches
            const listRunsResponse = await github.rest.actions.listWorkflowRunsForRepo({
              owner,
              repo,
              // Filter by workflow name
              workflow_id: workflowName + '.yml', // Append .yml as listWorkflowRunsForRepo expects filename
              status: 'success', // Only consider successful runs
              per_page: 1, // We only need the most recent one
              event: 'schedule,workflow_dispatch' # Filter by relevant events
            });

            const latestSuccessfulRun = listRunsResponse.data.workflow_runs[0];

            if (latestSuccessfulRun) {
              console.log(`Found latest successful run: ID ${latestSuccessfulRun.id}, Branch: ${latestSuccessfulRun.head_branch}`);
              core.setOutput('run_id', latestSuccessfulRun.id);
            } else {
              console.log(`No previous successful run found for workflow '${workflowName}'.`);
              core.setOutput('run_id', ''); // Output empty if no run found
            }

          } catch (error) {
            console.error('Error finding latest successful run:', error);
            // Do not fail the job if finding the run fails, allow initialization step to run
            core.setOutput('run_id', '');
          }

    - name: Download previous listings artifact
      id: download-artifact
      uses: actions/download-artifact@v4
      # Continue on error in case no previous successful run was found or artifact expired
      continue-on-error: true
      # Only attempt download if a run_id was found by the previous step
      if: steps.find-run.outputs.run_id != ''
      with:
        name: listings
        path: .
        # Use the found run_id to download the artifact from that specific run
        run-id: ${{ steps.find-run.outputs.run_id }}

    # Initialize listings file if download failed or no previous run was found
    - name: Initialize listings file if not downloaded
      # This step runs if the download step was skipped (no run_id) or if it failed
      if: steps.find-run.outputs.outputs.run_id == '' || steps.download-artifact.outcome != 'success'
      run: |
        echo "[]" > listings.json
        echo "Initialized new empty listings.json file because previous artifact was not downloaded."

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4 discord.py

    - name: Run scraper
      env:
        DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
        DISCORD_CHANNEL_ID: ${{ secrets.DISCORD_CHANNEL_ID }}
      run: python main.py

    # Upload the updated listings.json as an artifact for the next run
    - name: Upload new listings artifact
      uses: actions/upload-artifact@v4
      with:
        name: listings
        path: listings.json
        retention-days: 30 # Keep the artifact for 30 days
